rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Función auxiliar 'isAdmin()':
    // Verifica si el usuario autenticado actualmente tiene un documento en la colección 'users'
    // con un campo 'role' establecido exactamente a 'admin'.
    // Esto es crucial para determinar si un usuario tiene privilegios administrativos.
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // ======================================================================================
    // Reglas para la colección 'productos' (Inventario de la tienda)
    // ======================================================================================
    match /productos/{productId} {
      // Regla de lectura:
      // Permite que CUALQUIER usuario (autenticado o no) pueda leer
      // la información de los productos. Esto es necesario para que los clientes
      // vean el catálogo sin necesidad de iniciar sesión.
      // ¡ADVERTENCIA: Si tienes información sensible en los productos, ajusta esta regla!
      allow read: if true; 

      // Reglas de escritura (crear, actualizar, eliminar):
      // Permite que SOLO los usuarios que sean administradores (según la función isAdmin())
      // puedan agregar nuevos productos, modificar productos existentes o eliminarlos.
      // Esto protege el inventario de cambios no autorizados por clientes.
      allow create, update, delete: if isAdmin();
    }

    // ======================================================================================
    // Reglas para la colección 'ordenes' (Pedidos de los clientes)
    // ======================================================================================
    match /ordenes/{orderId} {
      // Regla de lectura:
      // Permite la lectura de una orden si:
      // 1. El usuario está autenticado Y
      // 2. El UID del usuario autenticado coincide con el 'userId' guardado en el documento de la orden (es su propia orden)
      //    O
      // 3. El usuario es un administrador (isAdmin()), permitiéndole ver todas las órdenes.
      allow read: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin());

      // Regla de creación:
      // Permite a un usuario crear una nueva orden si:
      // 1. El usuario está autenticado Y
      // 2. El 'userId' que se intenta guardar en la nueva orden coincide con el UID del usuario que la está creando.
      //    Esto previene que un usuario cree órdenes en nombre de otro.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;

      // Reglas de actualización y eliminación:
      // Permite que SOLO los administradores puedan actualizar (ej. cambiar el estado) o eliminar órdenes.
      // Los clientes no pueden modificar sus órdenes una vez creadas.
      allow update, delete: if isAdmin();
    }

    // ======================================================================================
    // Reglas para la colección 'users' (Perfiles de usuario, incluye admins)
    // ======================================================================================
    match /users/{userId} { // Asume que el ID del documento es el UID del usuario
      // Regla de lectura:
      // Permite a un usuario leer su PROPIO perfil de usuario O si es un administrador.
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());

      // Regla de actualización:
      // Permite a un usuario actualizar su PROPIO perfil (ej. dirección, teléfono).
      // NOTA: Se recomienda añadir validaciones más específicas aquí para evitar que se modifiquen campos sensibles
      // como el rol si los usuarios regulares pudieran intentar cambiarlo desde el cliente.
      allow update: if request.auth != null && request.auth.uid == userId;

      // Regla de creación:
      // Permite a un usuario autenticado crear su PROPIO documento de perfil
      // al momento de registrarse por primera vez.
      allow create: if request.auth != null && request.auth.uid == userId;

      // Regla de eliminación:
      // Permite que SOLO los administradores puedan eliminar perfiles de usuario.
      allow delete: if isAdmin();
    }

    // ======================================================================================
    // Regla de fallback (Por defecto, denegar todo lo no especificado)
    // ======================================================================================
    // Deniega cualquier operación de lectura o escritura en colecciones o documentos
    // que no hayan sido explícitamente permitidas por las reglas anteriores.
    // Esta es una buena práctica de seguridad para evitar "agujeros" inesperados.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
